// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.zh.all.hello

@SerialVersionUID(0L)
final case class ToBeGreeted(
    person: _root_.scala.Option[com.zh.all.hello.Person] = None,
    msg: _root_.scala.Option[_root_.scala.Predef.String] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ToBeGreeted] with scalapb.lenses.Updatable[ToBeGreeted] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (person.isDefined) {
        val __value = person.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (msg.isDefined) {
        val __value = com.zh.all.hello.ToBeGreeted._typemapper_msg.toBase(msg.get)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      person.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      msg.foreach { __v =>
        val __m = com.zh.all.hello.ToBeGreeted._typemapper_msg.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.zh.all.hello.ToBeGreeted = {
      var __person = this.person
      var __msg = this.msg
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __person = Option(_root_.scalapb.LiteParser.readMessage(_input__, __person.getOrElse(com.zh.all.hello.Person.defaultInstance)))
          case 18 =>
            __msg = Option(com.zh.all.hello.ToBeGreeted._typemapper_msg.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, __msg.map(com.zh.all.hello.ToBeGreeted._typemapper_msg.toBase).getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance))))
          case tag => _input__.skipField(tag)
        }
      }
      com.zh.all.hello.ToBeGreeted(
          person = __person,
          msg = __msg
      )
    }
    def getPerson: com.zh.all.hello.Person = person.getOrElse(com.zh.all.hello.Person.defaultInstance)
    def clearPerson: ToBeGreeted = copy(person = None)
    def withPerson(__v: com.zh.all.hello.Person): ToBeGreeted = copy(person = Option(__v))
    def getMsg: _root_.scala.Predef.String = msg.getOrElse(com.zh.all.hello.ToBeGreeted._typemapper_msg.toCustom(com.google.protobuf.wrappers.StringValue.defaultInstance))
    def clearMsg: ToBeGreeted = copy(msg = None)
    def withMsg(__v: _root_.scala.Predef.String): ToBeGreeted = copy(msg = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => person.orNull
        case 2 => msg.map(com.zh.all.hello.ToBeGreeted._typemapper_msg.toBase).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => person.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => msg.map(com.zh.all.hello.ToBeGreeted._typemapper_msg.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.zh.all.hello.ToBeGreeted
}

object ToBeGreeted extends scalapb.GeneratedMessageCompanion[com.zh.all.hello.ToBeGreeted] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.zh.all.hello.ToBeGreeted] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.zh.all.hello.ToBeGreeted = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.zh.all.hello.ToBeGreeted(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.zh.all.hello.Person]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]].map(com.zh.all.hello.ToBeGreeted._typemapper_msg.toCustom)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.zh.all.hello.ToBeGreeted] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.zh.all.hello.ToBeGreeted(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.zh.all.hello.Person]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.wrappers.StringValue]]).map(com.zh.all.hello.ToBeGreeted._typemapper_msg.toCustom)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HelloProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HelloProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.zh.all.hello.Person
      case 2 => __out = com.google.protobuf.wrappers.StringValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.zh.all.hello.ToBeGreeted(
  )
  implicit class ToBeGreetedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.zh.all.hello.ToBeGreeted]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.zh.all.hello.ToBeGreeted](_l) {
    def person: _root_.scalapb.lenses.Lens[UpperPB, com.zh.all.hello.Person] = field(_.getPerson)((c_, f_) => c_.copy(person = Option(f_)))
    def optionalPerson: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.zh.all.hello.Person]] = field(_.person)((c_, f_) => c_.copy(person = f_))
    def msg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMsg)((c_, f_) => c_.copy(msg = Option(f_)))
    def optionalMsg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.msg)((c_, f_) => c_.copy(msg = f_))
  }
  final val PERSON_FIELD_NUMBER = 1
  final val MSG_FIELD_NUMBER = 2
  @transient
  private val _typemapper_msg: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, _root_.scala.Predef.String]]
}
